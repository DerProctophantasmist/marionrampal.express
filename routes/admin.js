// Generated by CoffeeScript 2.5.1
(function() {
  var VErr, done, exec, express, folder, fromDir, log, onInit, prodDir, renderError, router, vasync;

  express = require('express');

  router = express.Router();

  vasync = require('vasync');

  VErr = require('verror');

  exec = require('child_process').execFile;

  log = require('../helpers/logger').mainLogger;

  //hbs = require('hbs')
  prodDir = null;

  fromDir = null;

  renderError = function(err) {
    return {};
  };

  folder = function(rootSource, subDir) {
    return {
      cleanup: function(callback) {
        if (prodDir === null) {
          throw new VErr("config not loaded.");
        }
        return exec('rm', ['-rf', prodDir + '/' + subDir], function(err, stdout, stderr) {
          return callback(err, {stdout, stderr});
        });
      },
      sync: function(callback) {
        if (prodDir === null) {
          throw new VErr("config not loaded.");
        }
        return exec('rsync', ['-a', rootSource + '/' + subDir + '/', prodDir + '/' + subDir], function(err, stdout, stderr) {
          return callback(err, {stdout, stderr});
        });
      }
    };
  };

  done = function(res, req, next) {
    return function(err, results) {
      if (err) {
        req.log.error(err, "failed to commit changes");
        return renderError(new VErr(err, "Failed to commit changes"));
      } else {
        return res.render('ok', {
          message: "Data and images from " + fromDir + " have been saved to the website"
        });
      }
    };
  };

  onInit = function(_, config) {
    prodDir = config.prodPublicDir;
    fromDir = config.stagingPublicDir;
    if (prodDir === null || fromDir === null) {
      throw new VErr("config not loaded.");
    }
    // GET home page. 
    return router.get('/commit', function(req, res, next) {
      var data, images;
      renderError = function(err) {
        return next(err);
      };
      req.log = require('../helpers/logger').requestLogger(req);
      data = folder(fromDir, 'data');
      images = folder(fromDir, 'images');
      vasync.parallel({
        'funcs': [data.sync, images.sync]
      }, done(res, req, next));
    });
  };

  require('../helpers/init').readConfig(onInit);

  module.exports = router;

}).call(this);

//# sourceMappingURL=admin.js.map
