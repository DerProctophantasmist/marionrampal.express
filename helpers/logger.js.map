{
  "version": 3,
  "file": "logger.js",
  "sourceRoot": "../../../../extra/cloud/express.marionrampal",
  "sources": [
    "../../../martin/cloud/express.marionrampal/helpers/logger.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,eAAA,EAAA,MAAA,EAAA,WAAA,EAAA,cAAA,EAAA,IAAA,EAAA,aAAA,EAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,QAAR;;EACT,GAAA,GAAM,OAAA,CAAQ,sBAAR;;EACN,IAAA,GAAO,OAAA,CAAQ,MAAR,EAFP;;;;EAKA,eAAA,GAAkB,GAAG,CAAC,YAAJ,CAAiB,YAAjB,EAA+B;IAC/C,QAAA,EAAU,IADqC;IAE/C,QAAA,EAAU,CAFqC;IAG/C,IAAA,EAAM,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,GAAG,CAAC,YAAtB,EAAoC,KAApC;EAHyC,CAA/B;;EAMlB,cAAA,GAAiB,MAAM,CAAC,YAAP,CACb;IAAA,IAAA,EAAM,aAAN;IACA,WAAA,EACI;MAAA,GAAA,EAAK,OAAA,CAAQ,2BAAR,CAAL;MACA,GAAA,EAAK,MAAM,CAAC,cAAc,CAAC,GAD3B;MAEA,GAAA,EAAK,MAAM,CAAC,cAAc,CAAC;IAF3B,CAFJ;IAKA,OAAA,EAAS;MACD;QAAA,MAAA,EAAQ,eAAR;QACA,KAAA,EAAO;MADP,CADC;MAID;QAAA,MAAA,EAAQ,OAAO,CAAC,MAAhB;QACA,KAAA,EAAO;MADP,CAJC;;EALT,CADa;;EAejB,WAAA,GAAc,QAAA,CAAC,EAAD,EAAK,IAAL,EAAW,UAAX,CAAA;AACd,QAAA;IAAI,GAAA,GAAM,cAAc,CAAC,KAAf,CAAqB;MACvB,EAAA,EAAI,EADmB;MAEvB,IAAA,EAAM,IAFiB;MAGvB,UAAA,EAAY;IAHW,CAArB,EAIH,IAJG;WAKN,GAAG,CAAC,IAAJ,CAAS,UAAT;EANU;;EAQd,aAAA,GAAgB,QAAA,CAAC,GAAD,CAAA;IACZ,IAAG,GAAA,KAAO,IAAV;MACI,cAAc,CAAC,KAAf,CAAqB,kDAArB,EADJ;;IAEA,IAAG,GAAG,CAAC,EAAJ,KAAU,IAAb;MACI,cAAc,CAAC,KAAf,CAAqB,+BAArB,EADJ;;WAEA,cAAc,CAAC,KAAf,CAAqB;MACjB,EAAA,EAAI,GAAG,CAAC;IADS,CAArB,EAEG,IAFH;EALY;;EAYhB,MAAM,CAAC,OAAP,GAAiB;IACb,UAAA,EAAY,cADC;IAEb,WAFa;IAGb;EAHa;AA9CjB",
  "sourcesContent": [
    "bunyan = require('bunyan')\nrfs = require('rotating-file-stream');\npath = require('path') \n\n# create a rotating write stream\naccessLogStream = rfs.createStream('access.log', {\n  interval: '3d', # rotate every 3 days\n  maxFiles: 3,\n  path: path.join(process.env.EXPRESS_ROOT, 'log')\n})\n\nloggerInstance = bunyan.createLogger(\n    name: 'main Logger',\n    serializers: \n        req: require('bunyan-express-serializer')\n        res: bunyan.stdSerializers.res\n        err: bunyan.stdSerializers.err\n    streams: [\n            stream: accessLogStream \n            level: 'info'\n        ,\n            stream: process.stdout\n            level: 'info'\n    ]\n)\n\nlogResponse = (id, body, statusCode) ->\n    log = loggerInstance.child({\n        id: id,\n        body: body,\n        statusCode: statusCode\n    }, true)\n    log.info('response')\n\nrequestLogger = (req) ->\n    if req == null \n        loggerInstance.error('logger: request not set when initializing logger')\n    if req.id == null\n        loggerInstance.error('logger: id not set on request')\n    loggerInstance.child({\n        id: req.id\n    }, true)\n\n\n\n\nmodule.exports = {\n    mainLogger: loggerInstance\n    logResponse\n    requestLogger\n}\n"
  ]
}